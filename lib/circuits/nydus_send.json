{"noir_version":"1.0.0-beta.12+9a5b3695b42e391fa27c48e87b9bbb07523d664d","hash":"8737459479781995352","abi":{"parameters":[{"name":"user_key","type":{"kind":"field"},"visibility":"private"},{"name":"token_address","type":{"kind":"field"},"visibility":"public"},{"name":"amount","type":{"kind":"field"},"visibility":"public"},{"name":"current_amount","type":{"kind":"field"},"visibility":"public"},{"name":"previous_nonce","type":{"kind":"field"},"visibility":"public"},{"name":"previous_personal_imt_root","type":{"kind":"field"},"visibility":"public"},{"name":"imt_leaf_proof","type":{"kind":"array","length":32,"type":{"kind":"field"}},"visibility":"public"},{"name":"receiver_public_key","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"master_tree_root","type":{"kind":"field"},"visibility":"public"},{"name":"personal_imt_root_proof","type":{"kind":"array","length":32,"type":{"kind":"field"}},"visibility":"public"},{"name":"personal_imt_root_leaf_value","type":{"kind":"field"},"visibility":"public"},{"name":"personal_imt_root_leaf_key","type":{"kind":"field"},"visibility":"public"},{"name":"personal_imt_root_leaf_idx","type":{"kind":"field"},"visibility":"public"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"field"},{"kind":"array","length":2,"type":{"kind":"field"}},{"kind":"array","length":2,"type":{"kind":"field"}},{"kind":"array","length":2,"type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"7054198250396484562":{"error_kind":"string","string":"Personal IMT root proof verification failed"},"12015829347525818808":{"error_kind":"string","string":"Current balance proof should be valid"},"12161378539035059347":{"error_kind":"string","string":"Field failed to decompose into specified 254 limbs"},"12169368178153805254":{"error_kind":"string","string":"Personal IMT root leaf value doesn't match provided personal_imt_root"}}},"bytecode":"","debug_symbols":"","file_map":{"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"50":{"source":"use dep::std;\nuse std::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul};\nuse dep::poseidon::poseidon2::Poseidon2;\nuse dep::poseidon_ctr_encryption::{poseidon_ctr_encrypt};\nuse dep::ec::tecurve::affine::{Point};\nuse dep::ec::consts::te::{baby_jubjub};\nuse dep::indexed_merkle_tree::{\n    Leaf,\n    Proof,\n    insert_item,\n    verify_proof\n};\nmod test;\n\n// === EXTENDED PEDERSEN COMMITMENT WITH DOMAIN SEPARATION ===\n// Uses m*G + r*H + domain for token-specific domain separation\n\nfn pedersen_commitment_token(m: Field, r: Field, token_address: Field) -> EmbeddedCurvePoint {\n    // Get generators using derive_generators\n    let generators: [EmbeddedCurvePoint; 3] = std::hash::derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), 0);\n    let G = generators[0];  // First generator\n    let H = generators[1];  // Second generator\n    let D = generators[2];  // Third generator\n    // Create scalars for multi_scalar_mul\n    let mut scalars = [EmbeddedCurveScalar { lo: 0, hi: 0 }; 3];\n    scalars[0] = from_field(m);\n    scalars[1] = from_field(r);\n    scalars[2] = from_field(token_address);\n    \n    // Create points for multi_scalar_mul: [G, H, G]\n    let mut points = [EmbeddedCurvePoint::point_at_infinity(); 3];\n    points[0] = G;\n    points[1] = H;\n    points[2] = D;  \n    \n    // Compute commitment: m*G + r*H + token_address*D\n    multi_scalar_mul(points, scalars)\n}\n\n\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\n// Removed unused function\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n\nfn from_field(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) =   compute_decomposition(scalar) ;\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\n\nfn main(\n    user_key: Field,\n    token_address: pub Field,\n    amount: pub Field,\n    current_amount: pub Field,\n    previous_nonce: pub Field, \n    previous_personal_imt_root: pub Field,\n    imt_leaf_proof: pub [Field; 32], \n    receiver_public_key: pub [Field; 2],\n    \n    \n    master_tree_root: pub Field,                    // Master tree root from contract\n    personal_imt_root_proof: pub [Field; 32],      // Proof that personal_imt_root is a leaf in master tree\n    personal_imt_root_leaf_value: pub Field,       // The actual value of personal_imt_root leaf\n    personal_imt_root_leaf_key: pub Field,          // The key for the personal_imt_root leaf in master tree\n    personal_imt_root_leaf_idx: pub Field,          // The index of the personal_imt_root leaf in master tree\n) -> pub (Field, Field, [Field; 2], [Field; 2], [Field; 2]) {\n    // === TWO-LEVEL TREE VERIFICATION ===\n    // 1. Verify that personal_imt_root is a valid leaf in the master tree\n    // 2. Verify the user's balance in their personal IMT\n    // 3. Perform the send operation\n    \n    // NEW: Verify that personal_imt_root is a valid leaf in the master tree\n    // 1. Create the personal_imt_root leaf for verification\n    let personal_imt_root_leaf = Leaf {\n        key: personal_imt_root_leaf_key as u64,\n        next_idx: 0,\n        next_key: 0,\n        value: personal_imt_root_leaf_value\n    };\n    \n    // 2. Verify that personal_imt_root_leaf_value matches the personal_imt_root\n    assert(personal_imt_root_leaf_value == previous_personal_imt_root, \"Personal IMT root leaf value doesn't match provided personal_imt_root\");\n    \n    // 3. Verify the personal_imt_root proof against the master tree root\n    // Use the provided leaf index from the proof generation\n    let personal_imt_root_proof = Proof {\n        leaf_idx: personal_imt_root_leaf_idx as u32, // Use the provided leaf index\n        leaf: personal_imt_root_leaf,\n        root: master_tree_root,\n        siblings: personal_imt_root_proof\n    };\n    \n    // 4. Verify the personal_imt_root proof is valid\n    let personal_imt_root_proof_valid = verify_proof(personal_imt_root_proof);\n    assert(personal_imt_root_proof_valid, \"Personal IMT root proof verification failed\");\n    \n    // 5. The master_tree_root is now verified to be a valid root from the contract\n    // This proves that personal_imt_root was a valid leaf in the master tree\n    \n    assert((current_amount as u64) >= (amount as u64));\n    let nonce = previous_nonce + 1 as Field;\n    let previous_nonce_commitment = \n        Poseidon2::hash([user_key, previous_nonce as Field], 2);\n  \n    let new_nonce_commitment = \n        Poseidon2::hash([user_key, previous_nonce_commitment + 1 as Field], 2);\n    \n    // === PERSONAL IMT VERIFICATION ===\n    // Now verify the user's balance in their personal IMT (second level verification)\n    \n    // Calculate new balance after spending\n    let new_balance = (current_amount as u64 - amount as u64) as Field;\n    \n    // Create a proof from the provided siblings to verify the current balance\n    // The proof contains the actual leaf structure from the tree\n    let current_leaf = Leaf {\n        key: token_address as u64,\n        next_idx: 0, \n        next_key: 0, \n        value: current_amount\n    };\n    \n    let current_proof = Proof {\n        leaf_idx: 1, // The leaf is at index 1 (after the zero item)\n        leaf: current_leaf,\n        root: previous_personal_imt_root,\n        siblings: imt_leaf_proof\n    };\n    \n    // Verify that the current balance proof is valid\n    assert(verify_proof(current_proof), \"Current balance proof should be valid\");\n    \n    // Update the leaf with the new balance\n    let updated_leaf = Leaf {\n        key: token_address as u64,\n        next_idx: 0,\n        next_key: 0,\n        value: new_balance\n    };\n    \n    // Removed unused variable\n    \n    // For now, we'll compute the new root by creating a simple tree with the updated balance\n    // In a real implementation, you would update the existing tree structure\n    let mut leaves: [Leaf; 32] = [Leaf { key: 0, next_idx: 0, next_key: 0, value: 0 }; 32];\n    let mut num_leaves = 1;\n    \n    let (insertion_result, _, _) = insert_item(\n        leaves,\n        num_leaves,\n        token_address as u64,\n        new_balance\n    );\n    \n    // Create new personal indexed merkle tree root hash\n    let new_personal_imt_root = insertion_result.root_after;\n    \n    // Create new main tree commitment\n    let new_main_tree_commit = Poseidon2::hash([new_personal_imt_root, new_nonce_commitment], 2);\n\n    // Perform Diffie-Hellman key exchange\n    let (sender_pub_key, shared_key) = perform_dh_key_exchange(user_key + nonce as Field, receiver_public_key);\n\n\n    // === POSEIDON CTR MODE ENCRYPTION ===\n    // Encrypt each field separately using Poseidon in CTR mode\n    \n    // Create shared key hash for encryption\n    let shared_key_hash = Poseidon2::hash([shared_key], 1);\n    \n    // Encrypt only amount and token_address (2 fields)\n    let encrypted_amount = poseidon_ctr_encrypt(amount, shared_key_hash, 0);\n    let encrypted_token_address = poseidon_ctr_encrypt(token_address, shared_key_hash, 1);\n    let encrypted_note = [encrypted_amount, encrypted_token_address];\n    \n    // For encrypted_event, use view key approach (like in nydus-entry) to encrypt only 2 fields\n    let user_key_hash = Poseidon2::hash([user_key], 1);\n    let view_string = 0x76696577696e675f6b6579 as Field;\n    let view_key = Poseidon2::hash([view_string, user_key_hash], 2);\n    \n    // Encrypt only amount and token_address using view key\n    let encrypted_amount = poseidon_ctr_encrypt(amount, view_key, 0);\n    let encrypted_token_address = poseidon_ctr_encrypt(token_address, view_key, 1);\n    \n    // === PEDERSEN COMMITMENT FOR RECEIPT ===\n    // Create token-specific Pedersen commitment: C = m*G_token + r*H_token\n    // Where m = amount, r = shared_key_hash (blinding factor)\n    let receipt_commitment = pedersen_commitment_token(amount, shared_key_hash, token_address);\n\n    (   \n        new_nonce_commitment,\n        new_main_tree_commit,\n        encrypted_note,\n        [receipt_commitment.x, receipt_commitment.y],        \n        sender_pub_key\n    )\n}\n\n\n\nfn perform_dh_key_exchange(sender_private_key: Field, receiver_public_key: [Field; 2]) -> ([Field; 2], Field) {\n    // === DIFFIE-HELLMAN KEY EXCHANGE ===\n    // Create Baby Jubjub curve for DH\n    let bjj = baby_jubjub();\n    let generator = bjj.base8;\n    \n    // Generate sender's public key: sender_pub_key = sender_private_key * generator\n    let sender_public_key = bjj.curve.mul(sender_private_key, generator);\n    \n    // Reconstruct receiver's public key from the input\n    let receiver_pub_key = Point::new(receiver_public_key[0], receiver_public_key[1]);\n    \n    // Compute shared secret: shared_secret = sender_private_key * receiver_public_key\n    let shared_secret = bjj.curve.mul(sender_private_key, receiver_pub_key);\n    \n    // Hash the shared secret to get a final shared key\n    let shared_key = Poseidon2::hash([shared_secret.x, shared_secret.y], 2);\n    ([sender_public_key.x, sender_public_key.y], shared_key)\n\n}\n","path":"/home/drone/projects/ethrome25/circuits/main/nydus-send/src/main.nr"},"60":{"source":"pub mod affine {\n    // Affine coordinate representation of Twisted Edwards curves\n    // Points are represented by two-dimensional Cartesian coordinates.\n    // Group operations are implemented in terms of those in CurveGroup (in this case, extended Twisted Edwards) coordinates\n    // for reasons of efficiency.\n    // See <https://eprint.iacr.org/2008/522.pdf> for details.\n    use crate::{\n        montcurve::affine::{Curve as MCurve, Point as MPoint},\n        swcurve::affine::{Curve as SWCurve, Point as SWPoint}, tecurve::curvegroup,\n    };\n    use std::cmp::Eq;\n\n    // Curve specification\n    pub struct Curve { // Twisted Edwards curve\n        // Coefficients in defining equation ax^2 + y^2 = 1 + dx^2y^2\n        pub a: Field,\n        pub d: Field,\n        // Generator as point in Cartesian coordinates\n        pub gen: Point,\n    }\n    // Point in Cartesian coordinates\n    pub struct Point {\n        pub x: Field,\n        pub y: Field,\n    }\n\n    impl Point {\n        // Point constructor\n        // #[deprecated(\"It's recommmended to use the external noir-edwards library (https://github.com/noir-lang/noir-edwards)\")]\n        pub fn new(x: Field, y: Field) -> Self {\n            Self { x, y }\n        }\n\n        // Check if zero\n        pub fn is_zero(self) -> bool {\n            self.eq(Point::zero())\n        }\n\n        // Conversion to CurveGroup coordinates\n        pub fn into_group(self) -> curvegroup::Point {\n            let Self { x, y } = self;\n\n            curvegroup::Point::new(x, y, x * y, 1)\n        }\n\n        // Additive identity\n        pub fn zero() -> Self {\n            Point::new(0, 1)\n        }\n\n        // Negation\n        pub fn negate(self) -> Self {\n            let Self { x, y } = self;\n            Point::new(0 - x, y)\n        }\n\n        // Map into prime-order subgroup of equivalent Montgomery curve\n        pub fn into_montcurve(self) -> MPoint {\n            if self.is_zero() {\n                MPoint::zero()\n            } else {\n                let Self { x, y } = self;\n                let x0 = (1 + y) / (1 - y);\n                let y0 = (1 + y) / (x * (1 - y));\n\n                MPoint::new(x0, y0)\n            }\n        }\n    }\n\n    impl Eq for Point {\n        fn eq(self, p: Self) -> bool {\n            let Self { x: x1, y: y1 } = self;\n            let Self { x: x2, y: y2 } = p;\n\n            (x1 == x2) & (y1 == y2)\n        }\n    }\n\n    impl Curve {\n        // Curve constructor\n        pub fn new(a: Field, d: Field, gen: Point) -> Curve {\n            // Check curve coefficients\n            assert(a * d * (a - d) != 0);\n\n            let curve = Curve { a, d, gen };\n\n            // gen should be on the curve\n            assert(curve.contains(curve.gen));\n\n            curve\n        }\n\n        // Conversion to CurveGroup coordinates\n        pub fn into_group(self) -> curvegroup::Curve {\n            let Curve { a, d, gen } = self;\n\n            curvegroup::Curve { a, d, gen: gen.into_group() }\n        }\n\n        // Membership check\n        pub fn contains(self, p: Point) -> bool {\n            let Point { x, y } = p;\n            self.a * x * x + y * y == 1 + self.d * x * x * y * y\n        }\n\n        // Point addition, implemented in terms of mixed addition for reasons of efficiency\n        pub fn add(self, p1: Point, p2: Point) -> Point {\n            self.mixed_add(p1, p2.into_group()).into_affine()\n        }\n\n        // Mixed point addition, i.e. first argument in affine, second in CurveGroup coordinates.\n        pub fn mixed_add(self, p1: Point, p2: curvegroup::Point) -> curvegroup::Point {\n            let Point { x: x1, y: y1 } = p1;\n            let curvegroup::Point { x: x2, y: y2, t: t2, z: z2 } = p2;\n\n            let a = x1 * x2;\n            let b = y1 * y2;\n            let c = self.d * x1 * y1 * t2;\n            let e = (x1 + y1) * (x2 + y2) - a - b;\n            let f = z2 - c;\n            let g = z2 + c;\n            let h = b - self.a * a;\n\n            let x = e * f;\n            let y = g * h;\n            let t = e * h;\n            let z = f * g;\n\n            curvegroup::Point::new(x, y, t, z)\n        }\n\n        // Scalar multiplication with scalar represented by a bit array (little-endian convention).\n        // If k is the natural number represented by `bits`, then this computes p + ... + p k times.\n        pub fn bit_mul<let N: u32>(self, bits: [u1; N], p: Point) -> Point {\n            self.into_group().bit_mul(bits, p.into_group()).into_affine()\n        }\n\n        // Scalar multiplication (p + ... + p n times)\n        pub fn mul(self, n: Field, p: Point) -> Point {\n            self.into_group().mul(n, p.into_group()).into_affine()\n        }\n\n        // Multi-scalar multiplication (n[0]*p[0] + ... + n[N]*p[N], where * denotes scalar multiplication)\n        pub fn msm<let N: u32>(self, n: [Field; N], p: [Point; N]) -> Point {\n            let mut out = Point::zero();\n\n            for i in 0..N {\n                out = self.add(out, self.mul(n[i], p[i]));\n            }\n\n            out\n        }\n\n        // Point subtraction\n        pub fn subtract(self, p1: Point, p2: Point) -> Point {\n            self.add(p1, p2.negate())\n        }\n\n        // Conversion to equivalent Montgomery curve\n        pub fn into_montcurve(self) -> MCurve {\n            let j = 2 * (self.a + self.d) / (self.a - self.d);\n            let k = 4 / (self.a - self.d);\n            let gen_montcurve = self.gen.into_montcurve();\n\n            MCurve::new(j, k, gen_montcurve)\n        }\n\n        // Conversion to equivalent Short Weierstrass curve\n        pub fn into_swcurve(self) -> SWCurve {\n            self.into_montcurve().into_swcurve()\n        }\n\n        // Point mapping into equivalent Short Weierstrass curve\n        pub fn map_into_swcurve(self, p: Point) -> SWPoint {\n            self.into_montcurve().map_into_swcurve(p.into_montcurve())\n        }\n\n        // Point mapping from equivalent Short Weierstrass curve\n        pub fn map_from_swcurve(self, p: SWPoint) -> Point {\n            self.into_montcurve().map_from_swcurve(p).into_tecurve()\n        }\n\n        // Elligator 2 map-to-curve method (via rational map)\n        pub fn elligator2_map(self, u: Field) -> Point {\n            self.into_montcurve().elligator2_map(u).into_tecurve()\n        }\n\n        // Simplified SWU map-to-curve method (via rational map)\n        pub fn swu_map(self, z: Field, u: Field) -> Point {\n            self.into_montcurve().swu_map(z, u).into_tecurve()\n        }\n    }\n}\npub mod curvegroup {\n    // CurveGroup coordinate representation of Twisted Edwards curves\n    // Points are represented by four-dimensional projective coordinates, viz. extended Twisted Edwards coordinates.\n    // See section 3 of <https://eprint.iacr.org/2008/522.pdf> for details.\n    use crate::{\n        montcurve::curvegroup::{Curve as MCurve, Point as MPoint},\n        swcurve::curvegroup::{Curve as SWCurve, Point as SWPoint}, tecurve::affine,\n    };\n    use std::cmp::Eq;\n\n    // Curve specification\n    pub struct Curve { // Twisted Edwards curve\n        // Coefficients in defining equation a(x^2 + y^2)z^2 = z^4 + dx^2y^2\n        pub a: Field,\n        pub d: Field,\n        // Generator as point in projective coordinates\n        pub gen: Point,\n    }\n    // Point in extended twisted Edwards coordinates\n    pub struct Point {\n        pub x: Field,\n        pub y: Field,\n        pub t: Field,\n        pub z: Field,\n    }\n\n    impl Point {\n        // Point constructor\n        pub fn new(x: Field, y: Field, t: Field, z: Field) -> Self {\n            Self { x, y, t, z }\n        }\n\n        // Check if zero\n        pub fn is_zero(self) -> bool {\n            let Self { x, y, t, z } = self;\n            (x == 0) & (y == z) & (y != 0) & (t == 0)\n        }\n\n        // Conversion to affine coordinates\n        pub fn into_affine(self) -> affine::Point {\n            let Self { x, y, t: _t, z } = self;\n\n            affine::Point::new(x / z, y / z)\n        }\n\n        // Additive identity\n        pub fn zero() -> Self {\n            Point::new(0, 1, 0, 1)\n        }\n\n        // Negation\n        pub fn negate(self) -> Self {\n            let Self { x, y, t, z } = self;\n\n            Point::new(0 - x, y, 0 - t, z)\n        }\n\n        // Map into prime-order subgroup of equivalent Montgomery curve\n        pub fn into_montcurve(self) -> MPoint {\n            self.into_affine().into_montcurve().into_group()\n        }\n    }\n\n    impl Eq for Point {\n        fn eq(self, p: Self) -> bool {\n            let Self { x: x1, y: y1, t: _t1, z: z1 } = self;\n            let Self { x: x2, y: y2, t: _t2, z: z2 } = p;\n\n            (x1 * z2 == x2 * z1) & (y1 * z2 == y2 * z1)\n        }\n    }\n\n    impl Curve {\n        // Curve constructor\n        pub fn new(a: Field, d: Field, gen: Point) -> Curve {\n            // Check curve coefficients\n            assert(a * d * (a - d) != 0);\n\n            let curve = Curve { a, d, gen };\n\n            // gen should be on the curve\n            assert(curve.contains(curve.gen));\n\n            curve\n        }\n\n        // Conversion to affine coordinates\n        pub fn into_affine(self) -> affine::Curve {\n            let Curve { a, d, gen } = self;\n\n            affine::Curve { a, d, gen: gen.into_affine() }\n        }\n\n        // Membership check\n        pub fn contains(self, p: Point) -> bool {\n            let Point { x, y, t, z } = p;\n\n            (z != 0)\n                & (z * t == x * y)\n                & (z * z * (self.a * x * x + y * y) == z * z * z * z + self.d * x * x * y * y)\n        }\n\n        // Point addition\n        pub fn add(self, p1: Point, p2: Point) -> Point {\n            let Point { x: x1, y: y1, t: t1, z: z1 } = p1;\n            let Point { x: x2, y: y2, t: t2, z: z2 } = p2;\n\n            let a = x1 * x2;\n            let b = y1 * y2;\n            let c = self.d * t1 * t2;\n            let d = z1 * z2;\n            let e = (x1 + y1) * (x2 + y2) - a - b;\n            let f = d - c;\n            let g = d + c;\n            let h = b - self.a * a;\n\n            let x = e * f;\n            let y = g * h;\n            let t = e * h;\n            let z = f * g;\n\n            Point::new(x, y, t, z)\n        }\n\n        // Point doubling, cf. section 3.3\n        pub fn double(self, p: Point) -> Point {\n            let Point { x, y, t: _t, z } = p;\n\n            let a = x * x;\n            let b = y * y;\n            let c = 2 * z * z;\n            let d = self.a * a;\n            let e = (x + y) * (x + y) - a - b;\n            let g = d + b;\n            let f = g - c;\n            let h = d - b;\n\n            let x0 = e * f;\n            let y0 = g * h;\n            let t0 = e * h;\n            let z0 = f * g;\n\n            Point::new(x0, y0, t0, z0)\n        }\n\n        // Scalar multiplication with scalar represented by a bit array (little-endian convention).\n        // If k is the natural number represented by `bits`, then this computes p + ... + p k times.\n        pub fn bit_mul<let N: u32>(self, bits: [u1; N], p: Point) -> Point {\n            let mut out = Point::zero();\n\n            for i in 0..N {\n                out = self.add(\n                    self.add(out, out),\n                    if (bits[N - i - 1] == 0) {\n                        Point::zero()\n                    } else {\n                        p\n                    },\n                );\n            }\n\n            out\n        }\n\n        // Scalar multiplication (p + ... + p n times)\n        pub fn mul(self, n: Field, p: Point) -> Point {\n            // TODO: temporary workaround until issue 1354 is solved\n            let mut n_as_bits: [u1; 254] = [0; 254];\n            let tmp: [u1; 254] = n.to_le_bits();\n            for i in 0..254 {\n                n_as_bits[i] = tmp[i];\n            }\n\n            self.bit_mul(n_as_bits, p)\n        }\n\n        // Multi-scalar multiplication (n[0]*p[0] + ... + n[N]*p[N], where * denotes scalar multiplication)\n        pub fn msm<let N: u32>(self, n: [Field; N], p: [Point; N]) -> Point {\n            let mut out = Point::zero();\n\n            for i in 0..N {\n                out = self.add(out, self.mul(n[i], p[i]));\n            }\n\n            out\n        }\n\n        // Point subtraction\n        pub fn subtract(self, p1: Point, p2: Point) -> Point {\n            self.add(p1, p2.negate())\n        }\n\n        // Conversion to equivalent Montgomery curve\n        pub fn into_montcurve(self) -> MCurve {\n            self.into_affine().into_montcurve().into_group()\n        }\n\n        // Conversion to equivalent Short Weierstrass curve\n        pub fn into_swcurve(self) -> SWCurve {\n            self.into_montcurve().into_swcurve()\n        }\n\n        // Point mapping into equivalent short Weierstrass curve\n        pub fn map_into_swcurve(self, p: Point) -> SWPoint {\n            self.into_montcurve().map_into_swcurve(p.into_montcurve())\n        }\n\n        // Point mapping from equivalent short Weierstrass curve\n        pub fn map_from_swcurve(self, p: SWPoint) -> Point {\n            self.into_montcurve().map_from_swcurve(p).into_tecurve()\n        }\n\n        // Elligator 2 map-to-curve method (via rational maps)\n        pub fn elligator2_map(self, u: Field) -> Point {\n            self.into_montcurve().elligator2_map(u).into_tecurve()\n        }\n\n        // Simplified SWU map-to-curve method (via rational map)\n        pub fn swu_map(self, z: Field, u: Field) -> Point {\n            self.into_montcurve().swu_map(z, u).into_tecurve()\n        }\n    }\n}\n","path":"/home/drone/nargo/github.com/noir-lang/ec/v0.1.2/src/tecurve.nr"},"61":{"source":"use dep::poseidon::poseidon2::Poseidon2;\r\n\r\nglobal MAX_DEPTH: u32 = 32;\r\n\r\npub struct Leaf {\r\n    pub key: u64,\r\n    pub next_idx: u32,\r\n    pub next_key: u64,\r\n    pub value: Field\r\n}\r\n\r\npub struct Proof {\r\n    pub leaf_idx: u32,\r\n    pub leaf: Leaf,\r\n    pub root: Field,\r\n    pub siblings: [Field; MAX_DEPTH]\r\n}\r\n\r\npub struct InsertionResult {\r\n    pub og_leaf_idx: u32,\r\n    pub og_leaf_key: u64,\r\n    pub og_leaf_next_idx: u32,\r\n    pub og_leaf_next_key: u64,\r\n    pub og_leaf_value: Field,\r\n    pub new_leaf_idx: u32,\r\n    pub new_leaf_key: u64,\r\n    pub new_leaf_value: Field,\r\n    pub root_before: Field,\r\n    pub root_after: Field,\r\n    pub siblings_before: [Field; MAX_DEPTH],\r\n    pub siblings_after_og: [Field; MAX_DEPTH],\r\n    pub siblings_after_new: [Field; MAX_DEPTH]\r\n}\r\n\r\npub fn empty_root() -> Field {\r\n    let zero_leaf = Leaf { key: 0, next_idx: 0, next_key: 0, value: 0 };\r\n    Poseidon2::hash([0, 0, 0, 0], 4)\r\n}\r\n\r\nfn hash_leaf(leaf: Leaf) -> Field {\r\n    Poseidon2::hash([\r\n        leaf.key as Field,\r\n        leaf.next_idx as Field,\r\n        leaf.next_key as Field,\r\n        leaf.value\r\n    ], 4)\r\n}\r\n\r\nfn hash_children(left: Field, right: Field) -> Field {\r\n    Poseidon2::hash([left, right], 2)\r\n}\r\n\r\npub fn compute_root(leaves: [Leaf; MAX_DEPTH], num_leaves: u32) -> Field {\r\n    let mut hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    let empty = empty_root();\r\n    \r\n    // Hash all leaves\r\n    for i in 0..MAX_DEPTH {\r\n        if i < num_leaves {\r\n            hashes[i] = hash_leaf(leaves[i]);\r\n        } else {\r\n            hashes[i] = empty;\r\n        }\r\n    }\r\n    \r\n    // Build tree bottom-up with fixed loop bounds\r\n    let mut current_hashes = hashes;\r\n    \r\n    // Level 0: 32 -> 16\r\n    let mut next_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..16 {\r\n        next_hashes[i] = hash_children(current_hashes[i * 2], current_hashes[i * 2 + 1]);\r\n    }\r\n    current_hashes = next_hashes;\r\n    \r\n    // Level 1: 16 -> 8\r\n    let mut next_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..8 {\r\n        next_hashes[i] = hash_children(current_hashes[i * 2], current_hashes[i * 2 + 1]);\r\n    }\r\n    current_hashes = next_hashes;\r\n    \r\n    // Level 2: 8 -> 4\r\n    let mut next_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..4 {\r\n        next_hashes[i] = hash_children(current_hashes[i * 2], current_hashes[i * 2 + 1]);\r\n    }\r\n    current_hashes = next_hashes;\r\n    \r\n    // Level 3: 4 -> 2\r\n    let mut next_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..2 {\r\n        next_hashes[i] = hash_children(current_hashes[i * 2], current_hashes[i * 2 + 1]);\r\n    }\r\n    current_hashes = next_hashes;\r\n    \r\n    // Level 4: 2 -> 1\r\n    let mut next_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    next_hashes[0] = hash_children(current_hashes[0], current_hashes[1]);\r\n    \r\n    next_hashes[0]\r\n}\r\n\r\npub fn generate_proof(leaves: [Leaf; MAX_DEPTH], num_leaves: u32, leaf_idx: u32) -> Proof {\r\n    let leaf = leaves[leaf_idx];\r\n    let root = compute_root(leaves, num_leaves);\r\n    let mut siblings: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    let mut hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    let empty = empty_root();\r\n    \r\n    for i in 0..MAX_DEPTH {\r\n        if i < num_leaves {\r\n            hashes[i] = hash_leaf(leaves[i]);\r\n        } else {\r\n            hashes[i] = empty;\r\n        }\r\n    }\r\n    \r\n    let mut idx = leaf_idx;\r\n    \r\n    // Level 0: 32 -> 16\r\n    let sibling_idx = if idx % 2 == 0 { idx + 1 } else { idx - 1 };\r\n    siblings[0] = hashes[sibling_idx];\r\n    let mut new_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..16 {\r\n        new_hashes[i] = hash_children(hashes[i * 2], hashes[i * 2 + 1]);\r\n    }\r\n    hashes = new_hashes;\r\n    idx = idx / 2;\r\n    \r\n    // Level 1: 16 -> 8\r\n    let sibling_idx = if idx % 2 == 0 { idx + 1 } else { idx - 1 };\r\n    siblings[1] = hashes[sibling_idx];\r\n    let mut new_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..8 {\r\n        new_hashes[i] = hash_children(hashes[i * 2], hashes[i * 2 + 1]);\r\n    }\r\n    hashes = new_hashes;\r\n    idx = idx / 2;\r\n    \r\n    // Level 2: 8 -> 4\r\n    let sibling_idx = if idx % 2 == 0 { idx + 1 } else { idx - 1 };\r\n    siblings[2] = hashes[sibling_idx];\r\n    let mut new_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..4 {\r\n        new_hashes[i] = hash_children(hashes[i * 2], hashes[i * 2 + 1]);\r\n    }\r\n    hashes = new_hashes;\r\n    idx = idx / 2;\r\n    \r\n    // Level 3: 4 -> 2\r\n    let sibling_idx = if idx % 2 == 0 { idx + 1 } else { idx - 1 };\r\n    siblings[3] = hashes[sibling_idx];\r\n    let mut new_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..2 {\r\n        new_hashes[i] = hash_children(hashes[i * 2], hashes[i * 2 + 1]);\r\n    }\r\n    hashes = new_hashes;\r\n    idx = idx / 2;\r\n    \r\n    // Level 4: 2 -> 1\r\n    let sibling_idx = if idx % 2 == 0 { idx + 1 } else { idx - 1 };\r\n    siblings[4] = hashes[sibling_idx];\r\n    \r\n    Proof { leaf_idx: leaf_idx, leaf: leaf, root: root, siblings: siblings }\r\n}\r\n\r\npub fn verify_proof(proof: Proof) -> bool {\r\n    let mut current_hash = hash_leaf(proof.leaf);\r\n    let mut idx = proof.leaf_idx;\r\n    \r\n    for i in 0..5 {\r\n        if idx % 2 == 0 {\r\n            current_hash = hash_children(current_hash, proof.siblings[i]);\r\n        } else {\r\n            current_hash = hash_children(proof.siblings[i], current_hash);\r\n        }\r\n        idx = idx / 2;\r\n    }\r\n    \r\n    current_hash == proof.root\r\n}\r\n\r\npub fn verify_exclusion_proof(excluded_key: u64, proof: Proof) -> bool {\r\n    let is_after_leaf = excluded_key > proof.leaf.key;\r\n    let is_before_next = (proof.leaf.next_idx == 0) | (excluded_key < proof.leaf.next_key);\r\n    is_after_leaf & is_before_next\r\n}\r\n\r\npub fn verify_insertion_proof(insertion_result: InsertionResult) -> bool {\r\n    let og_leaf = Leaf {\r\n        key: insertion_result.og_leaf_key,\r\n        next_idx: insertion_result.og_leaf_next_idx,\r\n        next_key: insertion_result.og_leaf_next_key,\r\n        value: insertion_result.og_leaf_value\r\n    };\r\n    \r\n    let og_proof = Proof {\r\n        leaf_idx: insertion_result.og_leaf_idx,\r\n        leaf: og_leaf,\r\n        root: insertion_result.root_before,\r\n        siblings: insertion_result.siblings_before\r\n    };\r\n    \r\n    let new_leaf = Leaf {\r\n        key: insertion_result.new_leaf_key,\r\n        next_idx: 0,\r\n        next_key: 0,\r\n        value: insertion_result.new_leaf_value\r\n    };\r\n    \r\n    let new_proof = Proof {\r\n        leaf_idx: insertion_result.new_leaf_idx,\r\n        leaf: new_leaf,\r\n        root: insertion_result.root_after,\r\n        siblings: insertion_result.siblings_after_new\r\n    };\r\n    \r\n    verify_proof(og_proof) & verify_proof(new_proof)\r\n}\r\n\r\npub fn insert_item(\r\n    leaves: [Leaf; MAX_DEPTH],\r\n    num_leaves: u32,\r\n    new_key: u64,\r\n    new_value: Field\r\n) -> (InsertionResult, [Leaf; MAX_DEPTH], u32) {\r\n    // Find insertion position to maintain sorted order\r\n    let mut insert_idx = num_leaves; // Default to end\r\n    let mut prev_idx = 0;\r\n    \r\n    // Find the correct position for insertion (without break)\r\n    for i in 0..MAX_DEPTH {\r\n        let i_u32 = i as u32;\r\n        if i_u32 < num_leaves {\r\n            let is_greater = leaves[i].key > new_key;\r\n            let is_less_than_insert = i_u32 < insert_idx;\r\n            if is_greater & is_less_than_insert {\r\n                insert_idx = i_u32;\r\n            }\r\n            if i_u32 < insert_idx {\r\n                prev_idx = i_u32;\r\n            }\r\n        }\r\n    }\r\n    \r\n    let mut new_leaves = leaves;\r\n    let new_leaf_idx = num_leaves;\r\n    \r\n    // Create new leaf\r\n    let new_leaf = Leaf {\r\n        key: new_key,\r\n        next_idx: 0,\r\n        next_key: 0,\r\n        value: new_value\r\n    };\r\n    \r\n    // Insert at the end for now (simplified approach)\r\n    new_leaves[new_leaf_idx] = new_leaf;\r\n    \r\n    // Update previous leaf's next pointers if needed\r\n    if prev_idx < num_leaves {\r\n        new_leaves[prev_idx] = Leaf {\r\n            key: leaves[prev_idx].key,\r\n            next_idx: new_leaf_idx,\r\n            next_key: new_key,\r\n            value: leaves[prev_idx].value\r\n        };\r\n    }\r\n    \r\n    let new_count = num_leaves + 1;\r\n    \r\n    // Generate proofs\r\n    let og_proof = generate_proof(leaves, num_leaves, prev_idx);\r\n    let new_proof = generate_proof(new_leaves, new_count, new_leaf_idx);\r\n    let updated_prev_proof = generate_proof(new_leaves, new_count, prev_idx);\r\n    \r\n    let result = InsertionResult {\r\n        og_leaf_idx: og_proof.leaf_idx,\r\n        og_leaf_key: og_proof.leaf.key,\r\n        og_leaf_next_idx: og_proof.leaf.next_idx,\r\n        og_leaf_next_key: og_proof.leaf.next_key,\r\n        og_leaf_value: og_proof.leaf.value,\r\n        new_leaf_idx: new_proof.leaf_idx,\r\n        new_leaf_key: new_proof.leaf.key,\r\n        new_leaf_value: new_proof.leaf.value,\r\n        root_before: og_proof.root,\r\n        root_after: new_proof.root,\r\n        siblings_before: og_proof.siblings,\r\n        siblings_after_og: updated_prev_proof.siblings,\r\n        siblings_after_new: new_proof.siblings\r\n    };\r\n    \r\n    (result, new_leaves, new_count)\r\n}","path":"/home/drone/projects/ethrome25/circuits/lib/indexed-merkle-tree/src/indexed_merkle_tree.nr"},"71":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/home/drone/projects/ethrome25/circuits/lib/poseidon/src/poseidon2.nr"},"73":{"source":"use dep::std;\r\nuse dep::poseidon::poseidon2::Poseidon2;\r\n\r\n/// Poseidon CTR Mode Encryption Library\r\n/// \r\n/// This library provides Poseidon-based encryption in CTR mode for field elements.\r\n/// It includes functions for encrypting individual fields and batch encryption.\r\n\r\n/// Generate a keystream using Poseidon with shared_key and nonce\r\npub fn poseidon_keystream(shared_key: Field, nonce: u32) -> Field {\r\n    // === POSEIDON KEYSTREAM GENERATION ===\r\n    // Generate keystream using Poseidon with shared_key and nonce\r\n    \r\n    // Use the public hash function with shared_key and nonce\r\n    Poseidon2::hash([shared_key, nonce as Field], 2)\r\n}\r\n\r\n/// Encrypt a single field using Poseidon CTR mode\r\npub fn poseidon_ctr_encrypt(plaintext: Field, shared_key: Field, counter: u32) -> Field {\r\n    // === POSEIDON CTR MODE ENCRYPTION ===\r\n    // Use Poseidon to generate keystream for CTR mode encryption\r\n    \r\n    // Generate keystream using Poseidon with shared_key and counter\r\n    let keystream = poseidon_keystream(shared_key, counter);\r\n    \r\n    // Encrypt by adding keystream to plaintext (field arithmetic equivalent of XOR)\r\n    let ciphertext = plaintext + keystream;\r\n    \r\n    ciphertext\r\n}\r\n\r\n/// Decrypt a single field using Poseidon CTR mode\r\npub fn poseidon_ctr_decrypt(ciphertext: Field, shared_key: Field, counter: u32) -> Field {\r\n    // === POSEIDON CTR MODE DECRYPTION ===\r\n    // Decryption is the same as encryption in CTR mode\r\n    \r\n    // Generate the same keystream\r\n    let keystream = poseidon_keystream(shared_key, counter);\r\n    \r\n    // Decrypt by subtracting keystream from ciphertext\r\n    let plaintext = ciphertext - keystream;\r\n    \r\n    plaintext\r\n}\r\n\r\n/// Encrypt all four fields (amount, token_address, ref, encryption_key) in one function call\r\n/// This provides integrity checking - the ref value can be verified when absorbing the note\r\npub fn poseidon_encrypt_all_fields(\r\n    amount: Field, \r\n    token_address: Field,\r\n    ref: Field,\r\n    encryption_key: Field\r\n) -> (Field, Field, Field, Field) {\r\n    // === POSEIDON ENCRYPT ALL FIELDS ===\r\n    // Encrypt all four fields with different counters in one function call\r\n    // The ref value provides integrity checking when absorbing the note\r\n    \r\n    let encrypted_amount = poseidon_ctr_encrypt(amount, encryption_key, 0);\r\n    let encrypted_token_address = poseidon_ctr_encrypt(token_address, encryption_key, 1);\r\n    let encrypted_ref = poseidon_ctr_encrypt(ref, encryption_key, 2);\r\n    let encrypted_key = poseidon_ctr_encrypt(encryption_key, encryption_key, 3);\r\n    \r\n    (encrypted_amount, encrypted_token_address, encrypted_ref, encrypted_key)\r\n}\r\n\r\n/// Encrypt all four fields and return as array for cleaner API\r\npub fn poseidon_encrypt_all_fields_array(\r\n    amount: Field, \r\n    token_address: Field,\r\n    ref: Field,\r\n    encryption_key: Field\r\n) -> [Field; 3] {\r\n    // === POSEIDON ENCRYPT ALL FIELDS ARRAY ===\r\n    // Encrypt all four fields and return the first 3 as an array\r\n    // The ref value provides integrity checking when absorbing the note\r\n    \r\n    let encrypted_amount = poseidon_ctr_encrypt(amount, encryption_key, 0);\r\n    let encrypted_token_address = poseidon_ctr_encrypt(token_address, encryption_key, 1);\r\n    let encrypted_ref = poseidon_ctr_encrypt(ref, encryption_key, 2);\r\n    \r\n    [encrypted_amount, encrypted_token_address, encrypted_ref]\r\n}\r\n\r\n// ===== BASIC FUNCTIONALITY TESTS =====\r\n\r\n#[test]\r\nfn test_basic_encryption_decryption() {\r\n    // Test basic encryption and decryption round-trip\r\n    let plaintext = 12345 as Field;\r\n    let shared_key = Poseidon2::hash([42 as Field], 1);\r\n    let counter = 0 as u32;\r\n    \r\n    let ciphertext = poseidon_ctr_encrypt(plaintext, shared_key, counter);\r\n    let decrypted = poseidon_ctr_decrypt(ciphertext, shared_key, counter);\r\n    \r\n    assert(decrypted == plaintext);\r\n}\r\n\r\n#[test]\r\nfn test_zero_plaintext() {\r\n    // Test encryption of zero value\r\n    let plaintext = 0 as Field;\r\n    let shared_key = Poseidon2::hash([123 as Field], 1);\r\n    let counter = 0 as u32;\r\n    \r\n    let ciphertext = poseidon_ctr_encrypt(plaintext, shared_key, counter);\r\n    let decrypted = poseidon_ctr_decrypt(ciphertext, shared_key, counter);\r\n    \r\n    assert(decrypted == plaintext);\r\n}\r\n\r\n#[test]\r\nfn test_large_plaintext() {\r\n    // Test encryption of large field value (using a large but valid field value)\r\n    let plaintext = 21888242871839275222246405745257275088548364400416034343698204186575808495616 as Field; // p-1\r\n    let shared_key = Poseidon2::hash([456 as Field], 1);\r\n    let counter = 0 as u32;\r\n    \r\n    let ciphertext = poseidon_ctr_encrypt(plaintext, shared_key, counter);\r\n    let decrypted = poseidon_ctr_decrypt(ciphertext, shared_key, counter);\r\n    \r\n    assert(decrypted == plaintext);\r\n}\r\n\r\n// ===== COUNTER/KEYSTREAM TESTS =====\r\n\r\n#[test]\r\nfn test_different_counters_produce_different_ciphertexts() {\r\n    // Test that different counters produce different ciphertexts\r\n    let plaintext = 1000 as Field;\r\n    let shared_key = Poseidon2::hash([789 as Field], 1);\r\n    \r\n    let ciphertext1 = poseidon_ctr_encrypt(plaintext, shared_key, 0);\r\n    let ciphertext2 = poseidon_ctr_encrypt(plaintext, shared_key, 1);\r\n    let ciphertext3 = poseidon_ctr_encrypt(plaintext, shared_key, 2);\r\n    \r\n    // All ciphertexts should be different\r\n    assert(ciphertext1 != ciphertext2);\r\n    assert(ciphertext2 != ciphertext3);\r\n    assert(ciphertext1 != ciphertext3);\r\n    \r\n    // But all should decrypt to the same plaintext\r\n    assert(poseidon_ctr_decrypt(ciphertext1, shared_key, 0) == plaintext);\r\n    assert(poseidon_ctr_decrypt(ciphertext2, shared_key, 1) == plaintext);\r\n    assert(poseidon_ctr_decrypt(ciphertext3, shared_key, 2) == plaintext);\r\n}\r\n\r\n#[test]\r\nfn test_keystream_consistency() {\r\n    // Test that same inputs produce same keystream\r\n    let shared_key = Poseidon2::hash([999 as Field], 1);\r\n    let nonce = 5 as u32;\r\n    \r\n    let keystream1 = poseidon_keystream(shared_key, nonce);\r\n    let keystream2 = poseidon_keystream(shared_key, nonce);\r\n    \r\n    assert(keystream1 == keystream2);\r\n}\r\n\r\n#[test]\r\nfn test_keystream_different_nonces() {\r\n    // Test that different nonces produce different keystreams\r\n    let shared_key = Poseidon2::hash([111 as Field], 1);\r\n    \r\n    let keystream1 = poseidon_keystream(shared_key, 0);\r\n    let keystream2 = poseidon_keystream(shared_key, 1);\r\n    let keystream3 = poseidon_keystream(shared_key, 2);\r\n    \r\n    assert(keystream1 != keystream2);\r\n    assert(keystream2 != keystream3);\r\n    assert(keystream1 != keystream3);\r\n}\r\n\r\n#[test]\r\nfn test_keystream_different_keys() {\r\n    // Test that different keys produce different keystreams\r\n    let nonce = 0 as u32;\r\n    \r\n    let keystream1 = poseidon_keystream(Poseidon2::hash([1 as Field], 1), nonce);\r\n    let keystream2 = poseidon_keystream(Poseidon2::hash([2 as Field], 1), nonce);\r\n    let keystream3 = poseidon_keystream(Poseidon2::hash([3 as Field], 1), nonce);\r\n    \r\n    assert(keystream1 != keystream2);\r\n    assert(keystream2 != keystream3);\r\n    assert(keystream1 != keystream3);\r\n}\r\n\r\n// ===== BATCH ENCRYPTION TESTS =====\r\n\r\n#[test]\r\nfn test_encrypt_all_fields_basic() {\r\n    // Test batch encryption of all four fields\r\n    let amount = 1000 as Field;\r\n    let token_address = 12345 as Field;\r\n    let ref = 67890 as Field;\r\n    let encryption_key = Poseidon2::hash([999 as Field], 1);\r\n    \r\n    let (enc_amount, enc_token, enc_ref, enc_key) = poseidon_encrypt_all_fields(\r\n        amount, token_address, ref, encryption_key\r\n    );\r\n    \r\n    // Verify each field can be decrypted individually\r\n    let dec_amount = poseidon_ctr_decrypt(enc_amount, encryption_key, 0);\r\n    let dec_token = poseidon_ctr_decrypt(enc_token, encryption_key, 1);\r\n    let dec_ref = poseidon_ctr_decrypt(enc_ref, encryption_key, 2);\r\n    let dec_key = poseidon_ctr_decrypt(enc_key, encryption_key, 3);\r\n    \r\n    assert(dec_amount == amount);\r\n    assert(dec_token == token_address);\r\n    assert(dec_ref == ref);\r\n    assert(dec_key == encryption_key);\r\n}\r\n\r\n#[test]\r\nfn test_encrypt_all_fields_zero_values() {\r\n    // Test batch encryption with zero values\r\n    let amount = 0 as Field;\r\n    let token_address = 0 as Field;\r\n    let ref = 0 as Field;\r\n    let encryption_key = Poseidon2::hash([0 as Field], 1);\r\n    \r\n    let (enc_amount, enc_token, enc_ref, enc_key) = poseidon_encrypt_all_fields(\r\n        amount, token_address, ref, encryption_key\r\n    );\r\n    \r\n    let dec_amount = poseidon_ctr_decrypt(enc_amount, encryption_key, 0);\r\n    let dec_token = poseidon_ctr_decrypt(enc_token, encryption_key, 1);\r\n    let dec_ref = poseidon_ctr_decrypt(enc_ref, encryption_key, 2);\r\n    let dec_key = poseidon_ctr_decrypt(enc_key, encryption_key, 3);\r\n    \r\n    assert(dec_amount == amount);\r\n    assert(dec_token == token_address);\r\n    assert(dec_ref == ref);\r\n    assert(dec_key == encryption_key);\r\n}\r\n\r\n#[test]\r\nfn test_encrypt_all_fields_different_keys() {\r\n    // Test that different encryption keys produce different results\r\n    let amount = 1000 as Field;\r\n    let token_address = 2000 as Field;\r\n    let ref = 3000 as Field;\r\n    \r\n    let key1 = Poseidon2::hash([111 as Field], 1);\r\n    let key2 = Poseidon2::hash([222 as Field], 1);\r\n    \r\n    let (enc1_amount, enc1_token, enc1_ref, enc1_key) = poseidon_encrypt_all_fields(\r\n        amount, token_address, ref, key1\r\n    );\r\n    \r\n    let (enc2_amount, enc2_token, enc2_ref, enc2_key) = poseidon_encrypt_all_fields(\r\n        amount, token_address, ref, key2\r\n    );\r\n    \r\n    // Different keys should produce different ciphertexts\r\n    assert(enc1_amount != enc2_amount);\r\n    assert(enc1_token != enc2_token);\r\n    assert(enc1_ref != enc2_ref);\r\n    assert(enc1_key != enc2_key);\r\n}\r\n\r\n#[test]\r\nfn test_encrypt_all_fields_integrity_check() {\r\n    // Test that the ref and key values provide integrity checking\r\n    let amount = 5000 as Field;\r\n    let token_address = 6000 as Field;\r\n    let ref = 7000 as Field;\r\n    let encryption_key = Poseidon2::hash([777 as Field], 1);\r\n    \r\n    let (enc_amount, enc_token, enc_ref, enc_key) = poseidon_encrypt_all_fields(\r\n        amount, token_address, ref, encryption_key\r\n    );\r\n    \r\n    // Decrypt the ref and key values - they should match the original values\r\n    let decrypted_ref = poseidon_ctr_decrypt(enc_ref, encryption_key, 2);\r\n    let decrypted_key = poseidon_ctr_decrypt(enc_key, encryption_key, 3);\r\n    assert(decrypted_ref == ref);\r\n    assert(decrypted_key == encryption_key);\r\n    \r\n    // This provides integrity: if someone tries to use a different key to decrypt,\r\n    // the values won't match, indicating tampering\r\n    let wrong_key = Poseidon2::hash([888 as Field], 1);\r\n    let wrong_decrypted_ref = poseidon_ctr_decrypt(enc_ref, wrong_key, 2);\r\n    let wrong_decrypted_key = poseidon_ctr_decrypt(enc_key, wrong_key, 3);\r\n    assert(wrong_decrypted_ref != ref);\r\n    assert(wrong_decrypted_key != encryption_key);\r\n}\r\n\r\n#[test]\r\nfn test_encrypt_all_fields_array() {\r\n    // Test the array version of encrypt all fields\r\n    let amount = 1000 as Field;\r\n    let token_address = 2000 as Field;\r\n    let ref = 3000 as Field;\r\n    let encryption_key = Poseidon2::hash([999 as Field], 1);\r\n    \r\n    let encrypted_array = poseidon_encrypt_all_fields_array(amount, token_address, ref, encryption_key);\r\n    \r\n    // Verify array has 3 elements\r\n    assert(encrypted_array.len() == 3);\r\n    \r\n    // Verify each element can be decrypted\r\n    let dec_amount = poseidon_ctr_decrypt(encrypted_array[0], encryption_key, 0);\r\n    let dec_token = poseidon_ctr_decrypt(encrypted_array[1], encryption_key, 1);\r\n    let dec_ref = poseidon_ctr_decrypt(encrypted_array[2], encryption_key, 2);\r\n    \r\n    assert(dec_amount == amount);\r\n    assert(dec_token == token_address);\r\n    assert(dec_ref == ref);\r\n}\r\n\r\n// ===== SECURITY TESTS =====\r\n\r\n#[test]\r\nfn test_wrong_key_fails_decryption() {\r\n    // Test that decryption with wrong key fails\r\n    let plaintext = 5000 as Field;\r\n    let correct_key = Poseidon2::hash([111 as Field], 1);\r\n    let wrong_key = Poseidon2::hash([222 as Field], 1);\r\n    let counter = 0 as u32;\r\n    \r\n    let ciphertext = poseidon_ctr_encrypt(plaintext, correct_key, counter);\r\n    let wrong_decrypted = poseidon_ctr_decrypt(ciphertext, wrong_key, counter);\r\n    \r\n    // Should not recover original plaintext\r\n    assert(wrong_decrypted != plaintext);\r\n}\r\n\r\n#[test]\r\nfn test_wrong_counter_fails_decryption() {\r\n    // Test that decryption with wrong counter fails\r\n    let plaintext = 7777 as Field;\r\n    let shared_key = Poseidon2::hash([333 as Field], 1);\r\n    let correct_counter = 2 as u32;\r\n    let wrong_counter = 3 as u32;\r\n    \r\n    let ciphertext = poseidon_ctr_encrypt(plaintext, shared_key, correct_counter);\r\n    let wrong_decrypted = poseidon_ctr_decrypt(ciphertext, shared_key, wrong_counter);\r\n    \r\n    // Should not recover original plaintext\r\n    assert(wrong_decrypted != plaintext);\r\n}\r\n\r\n#[test]\r\nfn test_encryption_deterministic() {\r\n    // Test that same inputs always produce same ciphertext\r\n    let plaintext = 8888 as Field;\r\n    let shared_key = Poseidon2::hash([444 as Field], 1);\r\n    let counter = 1 as u32;\r\n    \r\n    let ciphertext1 = poseidon_ctr_encrypt(plaintext, shared_key, counter);\r\n    let ciphertext2 = poseidon_ctr_encrypt(plaintext, shared_key, counter);\r\n    \r\n    // Same inputs should produce same ciphertext\r\n    assert(ciphertext1 == ciphertext2);\r\n}\r\n\r\n#[test]\r\nfn test_different_plaintexts_different_ciphertexts() {\r\n    // Test that different plaintexts produce different ciphertexts\r\n    let shared_key = Poseidon2::hash([555 as Field], 1);\r\n    let counter = 0 as u32;\r\n    \r\n    let ciphertext1 = poseidon_ctr_encrypt(1000 as Field, shared_key, counter);\r\n    let ciphertext2 = poseidon_ctr_encrypt(2000 as Field, shared_key, counter);\r\n    let ciphertext3 = poseidon_ctr_encrypt(3000 as Field, shared_key, counter);\r\n    \r\n    // Different plaintexts should produce different ciphertexts\r\n    assert(ciphertext1 != ciphertext2);\r\n    assert(ciphertext2 != ciphertext3);\r\n    assert(ciphertext1 != ciphertext3);\r\n}\r\n\r\n// ===== EDGE CASE TESTS =====\r\n\r\n#[test]\r\nfn test_max_counter_value() {\r\n    // Test with maximum counter value\r\n    let plaintext = 1234 as Field;\r\n    let shared_key = Poseidon2::hash([666 as Field], 1);\r\n    let max_counter = 4294967295 as u32; // u32::MAX\r\n    \r\n    let ciphertext = poseidon_ctr_encrypt(plaintext, shared_key, max_counter);\r\n    let decrypted = poseidon_ctr_decrypt(ciphertext, shared_key, max_counter);\r\n    \r\n    assert(decrypted == plaintext);\r\n}\r\n\r\n#[test]\r\nfn test_encryption_preserves_field_arithmetic() {\r\n    // Test that encryption preserves field arithmetic properties\r\n    let a = 1000 as Field;\r\n    let b = 2000 as Field;\r\n    let shared_key = Poseidon2::hash([777 as Field], 1);\r\n    let counter = 0 as u32;\r\n    \r\n    // Encrypt individual values\r\n    let enc_a = poseidon_ctr_encrypt(a, shared_key, counter);\r\n    let enc_b = poseidon_ctr_encrypt(b, shared_key, counter);\r\n    \r\n    // Decrypt and verify\r\n    let dec_a = poseidon_ctr_decrypt(enc_a, shared_key, counter);\r\n    let dec_b = poseidon_ctr_decrypt(enc_b, shared_key, counter);\r\n    \r\n    assert(dec_a == a);\r\n    assert(dec_b == b);\r\n}\r\n\r\n#[test]\r\nfn test_keystream_uniformity() {\r\n    // Test that keystreams appear uniformly distributed\r\n    let shared_key = Poseidon2::hash([888 as Field], 1);\r\n    \r\n    let keystream1 = poseidon_keystream(shared_key, 0);\r\n    let keystream2 = poseidon_keystream(shared_key, 1);\r\n    let keystream3 = poseidon_keystream(shared_key, 2);\r\n    let keystream4 = poseidon_keystream(shared_key, 3);\r\n    let keystream5 = poseidon_keystream(shared_key, 4);\r\n    \r\n    // All keystreams should be different (very high probability)\r\n    assert(keystream1 != keystream2);\r\n    assert(keystream2 != keystream3);\r\n    assert(keystream3 != keystream4);\r\n    assert(keystream4 != keystream5);\r\n    assert(keystream1 != keystream3);\r\n    assert(keystream1 != keystream4);\r\n    assert(keystream1 != keystream5);\r\n    assert(keystream2 != keystream4);\r\n    assert(keystream2 != keystream5);\r\n    assert(keystream3 != keystream5);\r\n}\r\n","path":"/home/drone/projects/ethrome25/circuits/lib/poseidon-ctr-encryption/src/lib.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert","directive_to_radix"]}